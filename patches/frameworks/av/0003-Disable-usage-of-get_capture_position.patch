From 24eb311140384b48851b24674ff760586b68412b Mon Sep 17 00:00:00 2001
From: vishalk17 <vishalkapadi95@gmail.com>
Date: Tue, 9 Oct 2018 17:32:37 +0000
Subject: [PATCH 3/4] Disable-usage-of-get_capture_position

Change-Id: If4f568dbbc0a2f7f99e4b2242c17c600df82e9b6
---
 services/audioflinger/Threads.cpp | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index e202ca4..c107149 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -6381,19 +6381,19 @@ reacquire_wakelock:
         mTimestamp.mTimeNs[ExtendedTimestamp::LOCATION_SERVER] = systemTime();
 
         // Update server timestamp with kernel stats
-        if (mPipeSource.get() == nullptr /* don't obtain for FastCapture, could block */) {
-            int64_t position, time;
-            int ret = mInput->stream->getCapturePosition(&position, &time);
-            if (ret == NO_ERROR) {
-                mTimestamp.mPosition[ExtendedTimestamp::LOCATION_KERNEL] = position;
-                mTimestamp.mTimeNs[ExtendedTimestamp::LOCATION_KERNEL] = time;
-                // Note: In general record buffers should tend to be empty in
-                // a properly running pipeline.
-                //
-                // Also, it is not advantageous to call get_presentation_position during the read
-                // as the read obtains a lock, preventing the timestamp call from executing.
-            }
-        }
+//        if (mPipeSource.get() == nullptr /* don't obtain for FastCapture, could block */) {
+//            int64_t position, time;
+//            int ret = mInput->stream->getCapturePosition(&position, &time);
+//            if (ret == NO_ERROR) {
+//                mTimestamp.mPosition[ExtendedTimestamp::LOCATION_KERNEL] = position;
+//                mTimestamp.mTimeNs[ExtendedTimestamp::LOCATION_KERNEL] = time;
+//                // Note: In general record buffers should tend to be empty in
+//                // a properly running pipeline.
+//                //
+//                // Also, it is not advantageous to call get_presentation_position during the read
+//                // as the read obtains a lock, preventing the timestamp call from executing.
+//            }
+//        }
         // Use this to track timestamp information
         // ALOGD("%s", mTimestamp.toString().c_str());
 
-- 
2.7.4

